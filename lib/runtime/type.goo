;;; type.gooli

(use primitives)

(def isa? (x|<any> y|<type>)
  (%isa? x y))

(def subtype? (x|<type> y|<type>)
  (%subtype? x y))

(def class-of (x|<any>) (%class-of x))

(def make (type|<type> &rest args)
  (let ((instance (%alloc-instance type)))
    (%apply initialize instance args)
    instance))

(def init (instance|<any> args)
  instance)

(def t= (x|<any>) (%t= x))

(def t< (class|<class>) (%t< class))

(def type-class (x|<subclass>) (%subclass-class x))

(def t+ (x|<type> y|<type>) (%t+ x y))

(def t? (type|<type>) (%t+ (%t= #f) type))

(def class-name (x|<class>) (%class-name x))

(def class-parents (x|<class>) (%class-supers x))

(def class-direct-props (x|<class>) (%class-direct-props x))

(def class-props (x|<class>) (%class-props x))

(def prop-owner (x|<class>) (error ""))

(defclass <prop> ()
  ())

(def prop-getter (x|<prop>) (error ""))

(def prop-setter (x|<prop>) (error ""))

(def prop-type (x|<prop>) (error ""))

(def prop-init (x|<prop>) (error ""))

(def prop-bound? (x gen|<gen>) (error ""))

;; TODO error is not defined here ?!?
(def as (x|<type> obj|<any>)
  (if (%isa? obj x)
      x
      (error "Cannot coerce ~a to ~a" obj x)))

(export isa? subtype? class-of make init
        <type>
        <singleton> t=
        <subclass> t< type-class
        <union> t+
        <class>
        t?
        class-name class-parents class-direct-props class-props
        prop-owner prop-getter prop-type prop-init prop-bound?)
