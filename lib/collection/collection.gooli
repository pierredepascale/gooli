;;; collection.gooli -- collection

(use primitives)

(def fab (t|(t< <col>) n|<int>) n)

(def col (t|(t< <col>) &rest keyvals) t)

(def fabs (t|(t< <col>) &rest elts) t)

(def len (x|<col>) x)

(def col-res-type (x|<col>) (%class-of x))

(def nul? (x|<col>) #f)

(def nul (x|<col>) #f)

(def key-test (x|<col>) x)

(def key-type (x|<col>) x)

(def elt-type (x|<col>) x)

(def elt (x|<col> k|<any>) x)

(def elt-or (x|<col> k|<any> d|<any>) d)

(def mem? (x|<col> y|<any>) x)

(def add (x|<col> y|<any>) x)

(def elts (x|<col> keys|<seq>) x)

(def dup (x|<col>) x)

(def keys (x|<col>) x)

(def items (x|<col>) x)

(def del (x|<col> key|<any>) x)

(def zap (x|<col>) x)

(def fill (x|<col> y|<any>) x)

(def any? (f|<fun> x|<col>) #f)

(def find (f|<fun> x|<col>) f)

(def find-or (f|<fun> x|<col> d|<any>) d)

(def all? (f|<fun> x|<col>) #f)

(def fold (f|<fun> init|<any> c|<col>)

(def fold+ (f|<fun> c|<col>) f)

(def do (f|<fun> c|<col>) f)

(def map (f|<fun> c|<col>) f)

;; mutable collection

(def elt-setter (v|<any> x|<col!> k|<any>) v)
(def into (x|<col!> y|<col>) x)
(def elt! (x|<col!> y|<any> default|<fun>) x)
(def fill! (x|<col!> y|<any>) x)
(def add! (x|<seq!> y|<any>) x)
(def del! (x|<seq!> key|<any>) x)
(def zap! (x|<col!>) x)

(export <col>
	fab col fabs len
	col-res-type
	nul? nul
	key-test key-type elt-type
	elt elt-or
	mem?
	add alts dup keys items del zap
	fill any? find find-or all?
	fold fold+ do map

	<col!>
	elt-setter
	into elt! fill! add! del! zap!)
